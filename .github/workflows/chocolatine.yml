name: "Chocolatine Workflows"

on:
  push:
    branches-ignore:
      - ga-ignore-*
  pull_request:
    branches-ignore:
      - ga-ignore-*

env:
  MIRROR_URL: "git@github.com:EpitechPGEPromo2029/B-DOP-200-MAR-2-1-chocolatine-mohamed-reda.bengana.git"
  EXECUTABLES: "mysh"

jobs:
  check_coding_style:
    name: Checking the coding style
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/epitech/coding-style-checker:latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run coding style checker
        run: check.sh $(pwd) $(pwd)

      - name: Display coding style errors (if any)
        run: |
          if [ -s coding-style-reports.log ]; then
            while IFS=": " read -r line; do
              echo "::error file=${{ github.workspace }}/$line::Coding style error detected"
            done < coding-style-reports.log
            exit 1
          fi

  check_program_compilation:
    name: Check the compilation of the program
    needs: check_coding_style
    runs-on: ubuntu-latest

    container:
      image: epitechcontent/epitest-docker

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: run make
        run: make
        timeout-minutes: 2

      - name: run make fclean
        run: make clean
        timeout-minutes: 2

      - name: run make
        run: make
        timeout-minutes: 2

      - name: Verify executable
        shell: bash
        run: |
          IFS=',' read -ra EXEC_FILES <<< "$EXECUTABLES"
          for exe in "${EXEC_FILES[0]}"; do
            if [ ! -f "$exe" ]; then
              echo "::error file=$exe::Executable $exe is missing"
              exit 1
            fi
            if [ ! -x "$exe" ]; then
              echo "::error file=$exe::Executable $exe is missing or not executable"
              exit 1
            fi
          done

  run_tests:
    name: Run all test
    needs: check_program_compilation
    runs-on: ubuntu-latest

    container:
      image: epitechcontent/epitest-docker

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run tests
        run: make tests_run
        timeout-minutes: 2

  push_to_mirror:
    runs-on: ubuntu-latest
    needs: run_tests

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Mirror a Epitech Repository
        uses : pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.PRIVATE_UI }}